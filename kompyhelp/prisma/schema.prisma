// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          Role      @default(INDIVIDUAL)
  language      String    @default("en")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  requests      RepairRequest[]
  appointments  Appointment[]
  feedback      Feedback[]
  
  // For admin/technician
  assignedJobs  RepairRequest[]  @relation("AssignedTechnician")
}

enum Role {
  INDIVIDUAL
  BUSINESS
  TECHNICIAN
  ADMIN
}

model RepairRequest {
  id            String    @id @default(cuid())
  title         String
  description   String
  status        RequestStatus
  priority      Priority  @default(MEDIUM)
  estimatedCost Decimal?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  technicianId  String?
  technician    User?     @relation("AssignedTechnician", fields: [technicianId], references: [id])
  appointment   Appointment?
  feedback      Feedback[]
  location      Location?
  
  // Many-to-many relation with inventory items
  parts         InventoryPart[]
}

enum RequestStatus {
  PENDING
  APPROVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Appointment {
  id            String    @id @default(cuid())
  date          DateTime
  duration      Int       // in minutes
  status        AppointmentStatus
  notes         String?
  
  // Relations
  requestId     String    @unique
  request       RepairRequest @relation(fields: [requestId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

model InventoryItem {
  id            String    @id @default(cuid())
  name          String
  description   String?
  quantity      Int
  price         Decimal
  category      String
  
  // Relations
  usedInRepairs InventoryPart[]
}

// Join table for many-to-many relation between RepairRequest and InventoryItem
model InventoryPart {
  id            String    @id @default(cuid())
  quantity      Int
  
  // Relations
  requestId     String
  request       RepairRequest @relation(fields: [requestId], references: [id])
  itemId        String
  item          InventoryItem @relation(fields: [itemId], references: [id])

  @@unique([requestId, itemId])
}

model KnowledgeBase {
  id            String    @id @default(cuid())
  title         String
  content       String    @db.Text
  category      String
  tags          String[]
  language      String    // en, uz, ru
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Feedback {
  id            String    @id @default(cuid())
  rating        Int       // 1-5
  comment       String?
  createdAt     DateTime  @default(now())
  
  // Relations
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  requestId     String
  request       RepairRequest @relation(fields: [requestId], references: [id])
}

model Location {
  id            String    @id @default(cuid())
  address       String
  city          String
  latitude      Float?
  longitude     Float?
  
  // Relations
  requestId     String    @unique
  request       RepairRequest @relation(fields: [requestId], references: [id])
}
